#!/bin/sh

# Author thuydang.de@gmail.com
# Inspired and learned from many open-sourced scripts

set -x

DIR=$( cd "$( dirname "$0" )" && pwd )

# SWITCH 1 Host only network 10.10.10.1
SWITCH_0=stackbr0

# SWITCH 2 Host only network 10.20.20.1
SWITCH_1=stackbr1

# SWITCH 3 Host only network 192.168.200.1
SWITCH_2=stackbr2

# "$@" an array of arguments. I.e, "do_brctl aaa bbb" results in "brctl aaa bbb".
do_brctl() {
	sudo brctl "$@"
}

do_ifconfig() {
	sudo ifconfig "$@"
}

do_dnsmasq() {
	sudo dnsmasq "$@"
}

do_iptables_restore() {
	sudo iptables-restore "$@"
}

#1: BRIDGE=kvmbr0
#2: GATEWAY=192.168.101.1
#3: DHCPRANGE=192.168.101.2,192.168.101.254
start_dnsmasq() {
	do_dnsmasq \
	--strict-order \
	--except-interface=lo \
	--interface=$1 \
	--listen-address=$2 \
	--bind-interfaces \
	--dhcp-range=$3 \
	--conf-file="" \
	--pid-file=/var/run/qemu-dnsmasq-$1.pid \
	--dhcp-leasefile=/var/run/qemu-dnsmasq-$1.leases \
	--dhcp-no-override \
	${TFTPROOT:+"--enable-tftp"} \
	${TFTPROOT:+"--tftp-root=$TFTPROOT"} \
	${BOOTP:+"--dhcp-boot=$BOOTP"}
}

stop_dnsmasq() {
	# auto stop when bridge killed
	:
}

check_bridge_status() {

	modprobe kvm
	modprobe kvm_intel
	modprobe tun

	echo "Check existence... bridge device "$1
	if ! BR_STATUS=$(ifconfig | grep "$1"); then 
		echo "Check existence... BR_STATUS not defined "$1
		BR_STATUS=""
	fi

	#if [ test "${BR_STATUS}" = "" ]; then
	#if [ -z "$BR_STATUS" ]; then
	if [ "$BR_STATUS" = "" ]; then
		return 1
	else
		return 0
	fi
}

create_bridge() {
	if check_bridge_status "$1"
		then 
			do_brctl addbr "$1"	
			do_brctl stp "$1" off
			do_brctl setfd "$1" 0
			do_ifconfig "$1" "$2" netmask "$3" up
			#ip a a 2001:db8:1234:5::1:1/64 dev kvmbr0
			sleep 0.5s
		else
			echo "Bridge $1 already exist"
		fi
}

del_bridge() {
		echo "Destroying bridges "$1
		do_ifconfig $1 down
		do_brctl delbr $1
}

############
add_filter_rules() {
	BRIDGE=$1
	NETWORK=$2
	NETMASK=$3

sudo iptables -F
sudo iptables -t nat -F
#	cat <<EOF
do_iptables_restore <<EOF
*nat
:PREROUTING ACCEPT [61:9671]
:POSTROUTING ACCEPT [121:7499]
:OUTPUT ACCEPT [132:8691]
-A POSTROUTING -s $NETWORK/$NETMASK -j MASQUERADE
COMMIT
# Completed on Fri Aug 24 15:20:25 2007
# Generated by iptables-save v1.3.6 on Fri Aug 24 15:20:25 2007
*filter
:INPUT ACCEPT [1453:976046]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [1605:194911]
-A INPUT -i $BRIDGE -p tcp -m tcp --dport 67 -j ACCEPT
-A INPUT -i $BRIDGE -p udp -m udp --dport 67 -j ACCEPT
-A INPUT -i $BRIDGE -p tcp -m tcp --dport 53 -j ACCEPT
-A INPUT -i $BRIDGE -p udp -m udp --dport 53 -j ACCEPT
-A FORWARD -i $1 -o $1 -j ACCEPT
-A FORWARD -s $NETWORK/$NETMASK -i $BRIDGE -j ACCEPT
-A FORWARD -d $NETWORK/$NETMASK -o $BRIDGE -m state --state RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -o $BRIDGE -j REJECT --reject-with icmp-port-unreachable
-A FORWARD -i $BRIDGE -j REJECT --reject-with icmp-port-unreachable
COMMIT
EOF
}


###########

test_bridge() {
	create_bridge "$SWITCH_0" "10.10.11.1" "255.255.255.0"
	create_bridge "$SWITCH_1" "10.20.21.1" "255.255.255.0"
	create_bridge "$SWITCH_2" "192.168.201.1" "255.255.255.0"
}

test_nat() {
	add_filter_rules "$SWITCH_2" "192.168.201.1" "255.255.255.0"
	#add_filter_rules "$SWITCH_0" "10.10.10.1" "255.255.255.0"
}

destroy_bridges() {
	del_bridge $SWITCH_0
	del_bridge $SWITCH_1
	del_bridge $SWITCH_2

}

test_dnsmasq() {
	#start_dnsmasq "$SWITCH_0" "10.10.10.1" "10.10.10.2,10.10.10.254"
	#start_dnsmasq "$SWITCH_1" "10.20.20.1" "10.20.20.2,10.20.20.254"
	start_dnsmasq "$SWITCH_2" "192.168.201.1" "192.168.201.2,192.168.201.254" 
	:
}

destroy_dnsmasq() {
	sudo killall dnsmasq
}

random_mac() {
	return printf 'DE:AD:BE:EF:%02X:%02X\n' $((RANDOM%256)) $((RANDOM%256))
}

test_vm() {
:
}

test_controller_vm () {
	# Controller Node
	#sudo qemu-kvm -hda $DIR/images/Fedora-x86_64-20-20140618-sda-controller.qcow2
	# the login account is cirros. The password is cubswin:)
	sudo kvm -hda $DIR/images/Fedora-x86_64-20-300G-20150130-sda-controller.qcow2 \
		-m 1000 -vnc :0 \
		-device e1000,netdev=snet0,mac=DE:AD:BE:EF:12:01 -netdev tap,id=snet0,script=$DIR/scripts/qemu-ifup-stackbr0.sh \
		-device e1000,netdev=snet1,mac=DE:AD:BE:EF:12:02 -netdev tap,id=snet1,script=$DIR/scripts/qemu-ifup-stackbr1.sh \
		-device e1000,netdev=snet2,mac=DE:AD:BE:EF:12:03 -netdev tap,id=snet2,script=$DIR/scripts/qemu-ifup-stackbr2.sh &

}

test_compute_vm () {
	# Compute Node Fedora-x86_64-20-300G-20150130-sda.qcow2
	#	-cpu host -enable-kvm \
	sudo kvm -hda $DIR/images/Fedora-x86_64-20-300G-20150130-sda-compute1.qcow2 \
		-cpu core2duo,+vmx -enable-kvm \
		-smp cpus=2 \
		-m 2000 -vnc :1 \
		-device e1000,netdev=snet0,mac=DE:AD:BE:EF:12:04 -netdev tap,id=snet0,script=$DIR/scripts/qemu-ifup-stackbr0.sh \
		-device e1000,netdev=snet1,mac=DE:AD:BE:EF:12:05 -netdev tap,id=snet1,script=$DIR/scripts/qemu-ifup-stackbr1.sh \
		-device e1000,netdev=snet2,mac=DE:AD:BE:EF:12:06 -netdev tap,id=snet2,script=$DIR/scripts/qemu-ifup-stackbr2.sh &

}

test_network_vm () {

	# Network Node
	sudo kvm -hda $DIR/images/Fedora-x86_64-20-300G-20150130-sda-network.qcow2 \
		-m 1500 -vnc :2 \
		-device e1000,netdev=snet0,mac=DE:AD:BE:EF:12:07 -netdev tap,id=snet0,script=$DIR/scripts/qemu-ifup-stackbr0.sh \
		-device e1000,netdev=snet1,mac=DE:AD:BE:EF:12:08 -netdev tap,id=snet1,script=$DIR/scripts/qemu-ifup-stackbr1.sh \
		-device e1000,netdev=snet2,mac=DE:AD:BE:EF:12:09 -netdev tap,id=snet2,script=$DIR/scripts/qemu-ifup-stackbr2.sh &
}

test_odl_vm () {
	# Opendaylight Node
	sudo kvm -hda $DIR/images/Fedora-x86_64-20-300G-20150130-sda-odl.qcow2 \
		-m 2048 -vnc :3 \
		-device e1000,netdev=snet0,mac=DE:AD:BE:EF:12:10 -netdev tap,id=snet0,script=$DIR/scripts/qemu-ifup-stackbr0.sh \
		-device e1000,netdev=snet1,mac=DE:AD:BE:EF:12:11 -netdev tap,id=snet1,script=$DIR/scripts/qemu-ifup-stackbr1.sh \
		-device e1000,netdev=snet2,mac=DE:AD:BE:EF:12:12 -netdev tap,id=snet2,script=$DIR/scripts/qemu-ifup-stackbr2.sh &
	
}



start_vms() {
## 2 Openstack nodes setup
	test_controller_vm
	sleep 10s

	test_compute_vm
	sleep 5s

## not used
	#test_network_vm
	#sleep 2s

## odl controller on host!
	#test_odl_vm
	#sleep 1s
}

########### Main ###########
case $1 in
	start)
		test_bridge
		test_dnsmasq
		test_nat			
		start_vms
		;;
	stop)
		destroy_bridges	
		#destroy_dnsmasq: killed with bridge destroy	

		destroy_dnsmasq
		echo "Please login and shutdown each vm"
		;;
	test-bridge)
		test_bridge	
		;;
	test-nat)
		test_nat			
		;;
	test-dnsmasq)
		test_dnsmasq	
		;;
	test-compute)
		test_bridge
		test_dnsmasq
		test_nat			
		test_compute_vm	
		;;
	test-vm)
		test_bridge
		test_dnsmasq
		test_nat			
		test_vm	
		;;
	start-odl)
		test_odl_vm
		;;
	start-compute)
		test_compute_vm
		;;
	*)
	echo "Usage: $(basename $0) (start | stop | test-[bridge,dnsmasq,nat,vm,compute] | start-[odl,compute])"
esac

